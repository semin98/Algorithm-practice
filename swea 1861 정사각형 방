from collections import deque

def bfs(si, sj):
    q = deque()
    q.append((si, sj))
    cnt = 1

    while q:
        ci, cj = q.popleft()
        for di, dj in ((-1, 0), (1, 0), (0, -1), (0, 1)):
            ni, nj = ci + di, cj + dj
            if 0 <= ni < N and 0 <= nj < N and arr[ci][cj] + 1 == arr[ni][nj]:
                q.append((ni, nj))
                cnt += 1

    res.append((si, sj, cnt))
    

T = int(input())

for test_case in range(1, T + 1):
    N = int(input())
    arr = [list(map(int, input().split())) for _ in range(N)]
    res = []

    for i in range(N):
        for j in range(N):
            bfs(i, j)
    
    max_cnt = 0
    for r in res:
        if r[-1] > max_cnt:
            max_cnt = r[-1]

    ans = N * N
    for r in res:
        if r[-1] == max_cnt:
            ans = min(ans, arr[r[0]][r[1]])

    print(f'#{test_case} {ans} {max_cnt}')
